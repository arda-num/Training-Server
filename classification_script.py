# -*- coding: utf-8 -*-
"""mobilenetv2_image_classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GnXCeB1sehHob2vfE-sxL_ZisOaP2VsG
"""

# #@title Default title text
# from zipfile import ZipFile
# file_name = "/archive.zip"

# with ZipFile(file_name, 'r') as zip:
#   zip.extractall()
#   print('Done')

import itertools
import os

import matplotlib.pylab as plt
import numpy as np
import PIL
import cv2

import tensorflow as tf
import tensorflow_hub as hub
import pathlib

from sklearn.model_selection import train_test_split

# print("TF version:", tf.__version__)
# print("Hub version:", hub.__version__)
# print("GPU is", "available" if tf.config.list_physical_devices('GPU') else "NOT AVAILABLE")

"""# **Importing Images**

Dataset link : https://www.kaggle.com/niteshfre/chessman-image-dataset

"""
def train(path):
	#path = "Chess"    # For other datasets, must be updated.
	data_dir = pathlib.Path(path)
	# data_dir

	# Class dictionaries
	chess_images_dict = {
		'bishop' : list(data_dir.glob('Bishop/*')),
		'king' : list(data_dir.glob('King/*')),
		'knight' : list(data_dir.glob('Knight/*')),
		'pawn' : list(data_dir.glob('Pawn/*')),
		'queen' : list(data_dir.glob('Queen/*')),
		'rook' : list(data_dir.glob('Rook/*')),
	}

	chess_labels_dict = {
		'bishop' : 0,
		'king' : 1,
		'knight' : 2,
		'pawn' : 3,
		'queen' : 4,
		'rook' : 5,
	}

	"""# **Getting Images into train and test arrays**"""

	x, y = [], []
	IMAGE_SHAPE = (224, 224)    # Required image size for MobileNetV2.
	dataset_size = 0
	for item_name, items in chess_images_dict.items():
		for image in items:
			img = cv2.imread(str(image))
			dataset_size += 1
			try :   # In case of errorness file types for cv2.
				resized_img = cv2.resize(img, IMAGE_SHAPE)    # Resizing images to appropriate size for MobileNetV2.
			except :
				continue
			x.append(resized_img)
			y.append(chess_labels_dict[item_name])
	# dataset_size

	x = np.array(x)
	y = np.array(y)

	# Dividing dataset into train and test sets
	x_train, x_test, y_train, y_test = train_test_split(x, y, train_size=0.75 , random_state=0)

	# Feature scaling
	x_train_scaled = x_train / 255
	x_test_scaled = x_test / 255

	"""# Transfer Learning Proccess

	For this project, MobileNetV2 is used.
	"""

	# Importing MobileNetV2 model from tensorflow hub.
	feature_extractor_model = "https://tfhub.dev/google/tf2-preview/mobilenet_v2/feature_vector/4"
	pretrained_model_without_top_layer = hub.KerasLayer(
		feature_extractor_model, input_shape=(224, 224, 3), 
		trainable=False)

	num_of_classes = len(chess_images_dict)   # For other datasets, must be updated.
	model = tf.keras.Sequential([
								pretrained_model_without_top_layer,
								tf.keras.layers.Dense(num_of_classes)
								])
	BATCH_SIZE = 16
	model.summary()

	model.compile(
		optimizer="adam",
		loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
		metrics=['accuracy']
	)

	model.fit(x_train_scaled, y_train, epochs=10, steps_per_epoch=len(x_train) // BATCH_SIZE)

	model.evaluate(x_test_scaled, y_test)

	return model